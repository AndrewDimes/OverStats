{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrew\\\\source\\\\repos\\\\OverStats\\\\src\\\\components\\\\BarChart\\\\BarChart.jsx\";\nimport React from 'react';\nimport CanvasJSReact from '../../canvasjs.react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default function BarChart({\n  winRatio,\n  profileData,\n  stats,\n  heroe\n}) {\n  let wins;\n  let losses;\n  let winRate;\n  let winRateSplit = [];\n  let imSry; // determine if the player has this information in their profile otherwise set it to 0\n\n  if (heroe) {\n    stats.game ? wins = stats.game.gamesWon : wins = 0;\n\n    if (wins === undefined) {\n      wins = 0;\n    }\n  }\n\n  if (heroe) {\n    stats.game ? losses = stats.game.gamesLost : losses = 0;\n\n    if (losses === undefined) {\n      losses = 0;\n    }\n  }\n\n  if (heroe) {\n    const total = wins + losses;\n    winRate = wins / total;\n    winRateSplit = winRate.toFixed(2).toString().split('.');\n\n    if (winRateSplit[0] < 1) {\n      imSry = winRateSplit[1];\n    } else if (wins === 0 && losses === 0) {\n      imSry = 'N/A';\n    } else {\n      imSry = 100;\n    }\n  } ////////////////////////////////////\n\n\n  const options = {\n    backgroundColor: \"rgb(0,133,208)\",\n    title: {\n      text: heroe ? `Win Rate: ${imSry}%` : `Overall Win Rate: ${winRatio}%`\n    },\n    data: [{\n      type: \"doughnut\",\n      dataPoints: [{\n        label: \"Wins\",\n        y: heroe ? wins : parseInt(stats.games.won),\n        color: \"rgb(100,248,40)\"\n      }, {\n        label: \"Losses\",\n        y: heroe ? losses : parseInt(stats.games.played) - parseInt(stats.games.won),\n        color: \"rgb(255,23,25)\"\n      }]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CanvasJSChart, {\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_c = BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["C:/Users/Andrew/source/repos/OverStats/src/components/BarChart/BarChart.jsx"],"names":["React","CanvasJSReact","CanvasJS","CanvasJSChart","BarChart","winRatio","profileData","stats","heroe","wins","losses","winRate","winRateSplit","imSry","game","gamesWon","undefined","gamesLost","total","toFixed","toString","split","options","backgroundColor","title","text","data","type","dataPoints","label","y","parseInt","games","won","color","played"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;;AAGA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;AAGA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAyBC,EAAAA,KAAzB;AAAgCC,EAAAA;AAAhC,CAAlB,EAA2D;AACtE,MAAIC,IAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,KAAJ,CALsE,CAMtE;;AACA,MAAIL,KAAJ,EAAW;AACPD,IAAAA,KAAK,CAACO,IAAN,GAAaL,IAAI,GAAGF,KAAK,CAACO,IAAN,CAAWC,QAA/B,GAA0CN,IAAI,GAAG,CAAjD;;AACA,QAAIA,IAAI,KAAKO,SAAb,EAAwB;AACpBP,MAAAA,IAAI,GAAG,CAAP;AACH;AACJ;;AACD,MAAID,KAAJ,EAAW;AACPD,IAAAA,KAAK,CAACO,IAAN,GAAaJ,MAAM,GAAGH,KAAK,CAACO,IAAN,CAAWG,SAAjC,GAA6CP,MAAM,GAAG,CAAtD;;AACA,QAAIA,MAAM,KAAKM,SAAf,EAA0B;AACtBN,MAAAA,MAAM,GAAG,CAAT;AACH;AAEJ;;AACD,MAAIF,KAAJ,EAAW;AACP,UAAMU,KAAK,GAAGT,IAAI,GAAGC,MAArB;AACAC,IAAAA,OAAO,GAAIF,IAAI,GAAGS,KAAlB;AACAN,IAAAA,YAAY,GAAGD,OAAO,CAACQ,OAAR,CAAgB,CAAhB,EAAmBC,QAAnB,GAA8BC,KAA9B,CAAoC,GAApC,CAAf;;AACA,QAAIT,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAtB,EAAyB;AACrBC,MAAAA,KAAK,GAAGD,YAAY,CAAC,CAAD,CAApB;AACH,KAFD,MAEO,IAAIH,IAAI,KAAK,CAAT,IAAcC,MAAM,KAAK,CAA7B,EAAgC;AACnCG,MAAAA,KAAK,GAAG,KAAR;AACH,KAFM,MAEA;AACHA,MAAAA,KAAK,GAAG,GAAR;AACH;AAEJ,GAhCqE,CAiCtE;;;AAEA,QAAMS,OAAO,GAAG;AACZC,IAAAA,eAAe,EAAE,gBADL;AAEZC,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAEjB,KAAK,GAAI,aAAYK,KAAM,GAAtB,GAA4B,qBAAoBR,QAAS;AADjE,KAFK;AAKZqB,IAAAA,IAAI,EAAE,CACF;AACIC,MAAAA,IAAI,EAAE,UADV;AAEIC,MAAAA,UAAU,EAAE,CAER;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,CAAC,EAAEtB,KAAK,GAAGC,IAAH,GAAUsB,QAAQ,CAACxB,KAAK,CAACyB,KAAN,CAAYC,GAAb,CAA3C;AAA8DC,QAAAA,KAAK,EAAE;AAArE,OAFQ,EAGR;AAAEL,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,CAAC,EAAEtB,KAAK,GAAGE,MAAH,GAAYqB,QAAQ,CAACxB,KAAK,CAACyB,KAAN,CAAYG,MAAb,CAAR,GAA+BJ,QAAQ,CAACxB,KAAK,CAACyB,KAAN,CAAYC,GAAb,CAA9E;AAAiGC,QAAAA,KAAK,EAAE;AAAxG,OAHQ;AAFhB,KADE;AALM,GAAhB;AAiBA,sBACI;AAAA,2BACI,QAAC,aAAD;AAAe,MAAA,OAAO,EAAEZ;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;KA5DuBlB,Q","sourcesContent":["import React from 'react';\r\nimport CanvasJSReact from '../../canvasjs.react'\r\n\r\n\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\n\r\nexport default function BarChart({ winRatio, profileData, stats, heroe }) {\r\n    let wins;\r\n    let losses;\r\n    let winRate;\r\n    let winRateSplit = []\r\n    let imSry;\r\n    // determine if the player has this information in their profile otherwise set it to 0\r\n    if (heroe) {\r\n        stats.game ? wins = stats.game.gamesWon : wins = 0\r\n        if (wins === undefined) {\r\n            wins = 0\r\n        }\r\n    }\r\n    if (heroe) {\r\n        stats.game ? losses = stats.game.gamesLost : losses = 0\r\n        if (losses === undefined) {\r\n            losses = 0;\r\n        }\r\n\r\n    }\r\n    if (heroe) {\r\n        const total = wins + losses\r\n        winRate = (wins / total)\r\n        winRateSplit = winRate.toFixed(2).toString().split('.')\r\n        if (winRateSplit[0] < 1) {\r\n            imSry = winRateSplit[1]\r\n        } else if (wins === 0 && losses === 0) {\r\n            imSry = 'N/A'\r\n        } else {\r\n            imSry = 100\r\n        }\r\n\r\n    }\r\n    ////////////////////////////////////\r\n\r\n    const options = {\r\n        backgroundColor: \"rgb(0,133,208)\",\r\n        title: {\r\n            text: heroe ? `Win Rate: ${imSry}%` : `Overall Win Rate: ${winRatio}%`\r\n        },\r\n        data: [\r\n            {\r\n                type: \"doughnut\",\r\n                dataPoints: [\r\n\r\n                    { label: \"Wins\", y: heroe ? wins : parseInt(stats.games.won), color: \"rgb(100,248,40)\" },\r\n                    { label: \"Losses\", y: heroe ? losses : parseInt(stats.games.played) - parseInt(stats.games.won), color: \"rgb(255,23,25)\" }\r\n\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n    return (\r\n        <div>\r\n            <CanvasJSChart options={options}\r\n            />\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}