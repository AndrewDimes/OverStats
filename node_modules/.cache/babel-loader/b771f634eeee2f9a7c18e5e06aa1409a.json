{"ast":null,"code":"import tokenService from './tokenService';\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(user)\n  }).then(res => {\n    if (res.ok) return res.json(); // Probably a duplicate email\n\n    throw new Error('Email already taken!');\n  }) // Parameter destructuring!\n  .then(({\n    token\n  }) => tokenService.setToken(token)); // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n}\n\nfunction deleteUser(user) {\n  console.log('in userservice');\n  return fetch(BASE_URL + user._id, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': 'Bearer ' + tokenService.getToken(),\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    if (res.ok) return res.json();\n    throw new Error('cant delete');\n  }).then(({\n    token\n  }) => tokenService.removeToken(token));\n}\n\nfunction edit(body, userId) {\n  console.log(body, 'in userService.edit');\n  return fetch(BASE_URL + 'edit/' + userId, {\n    method: 'PUT',\n    body: JSON.stringify(body),\n    headers: {\n      'Authorization': 'Bearer ' + tokenService.getToken(),\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Can not edit');\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(creds)\n  }).then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  logout,\n  login,\n  getUser,\n  edit,\n  deleteUser\n};","map":{"version":3,"sources":["C:/Users/Andrew/source/repos/OverStats/src/utils/userService.js"],"names":["tokenService","BASE_URL","signup","user","fetch","method","headers","Headers","body","JSON","stringify","then","res","ok","json","Error","token","setToken","deleteUser","console","log","_id","getToken","removeToken","edit","userId","getUser","getUserFromToken","logout","login","creds"],"mappings":"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","sourcesContent":["import tokenService from './tokenService';\r\n\r\nconst BASE_URL = '/api/users/';\r\n\r\nfunction signup(user) {\r\n  return fetch(BASE_URL + 'signup', {\r\n    method: 'POST',\r\n    headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    body: JSON.stringify(user)\r\n  })\r\n    .then(res => {\r\n      if (res.ok) return res.json();\r\n      // Probably a duplicate email\r\n      throw new Error('Email already taken!');\r\n    })\r\n    // Parameter destructuring!\r\n    .then(({ token }) => tokenService.setToken(token));\r\n  // Setting our token in localStorage in our browser\r\n  // then we'll be able to use with every request!\r\n  \r\n}\r\n\r\nfunction deleteUser(user) {\r\n  console.log('in userservice')\r\n  return fetch(BASE_URL + user._id, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Authorization': 'Bearer ' + tokenService.getToken(),\r\n      'Content-Type': 'application/json'\r\n    }\r\n\r\n  })\r\n    .then(res => {\r\n      if (res.ok) return res.json();\r\n      throw new Error('cant delete')\r\n    })\r\n    .then(({ token }) => tokenService.removeToken(token));\r\n\r\n}\r\nfunction edit(body, userId) {\r\n  console.log(body, 'in userService.edit')\r\n  return fetch(BASE_URL + 'edit/' + userId, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      'Authorization': 'Bearer ' + tokenService.getToken(),\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n    .then(res => {\r\n      if (res.ok) return res.json();\r\n      throw new Error('Can not edit')\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction login(creds) {\r\n  return fetch(BASE_URL + 'login', {\r\n    method: 'POST',\r\n    headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    body: JSON.stringify(creds)\r\n  })\r\n    .then(res => {\r\n      // Valid login if we have a status of 2xx (res.ok)\r\n      if (res.ok) return res.json();\r\n      throw new Error('Bad Credentials!');\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n}\r\n\r\n\r\n\r\n\r\nexport default {\r\n  signup,\r\n  logout,\r\n  login,\r\n  getUser,\r\n  edit,\r\n  deleteUser\r\n};"]},"metadata":{},"sourceType":"module"}